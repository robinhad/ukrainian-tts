import tempfile
import gradio as gr
from datetime import datetime
from enum import Enum
from ukrainian_tts.tts import TTS, Stress, Voices
from torch.cuda import is_available
from os import getenv
from data_logger import log_data
from threading import Thread
from queue import Queue
from time import sleep


def check_thread(logging_queue: Queue):
    logging_callback = log_data(
        hf_token=getenv("HF_API_TOKEN"), dataset_name="uk-tts-output", private=True
    )
    while True:
        sleep(60)
        batch = []
        while not logging_queue.empty():
            batch.append(logging_queue.get())

        if len(batch) > 0:
            try:
                logging_callback(batch)
            except:
                print(
                    "Error happened while pushing data to HF. Puttting items back in queue..."
                )
                for item in batch:
                    logging_queue.put(item)


if getenv("HF_API_TOKEN") is not None:
    log_queue = Queue()
    t = Thread(target=check_thread, args=(log_queue,))
    t.start()


class VoiceOption(Enum):
    Tetiana = "–¢–µ—Ç—è–Ω–∞ (–∂—ñ–Ω–æ—á–∏–π) üë©"
    Mykyta = "–ú–∏–∫–∏—Ç–∞ (—á–æ–ª–æ–≤—ñ—á–∏–π) üë®"
    Lada = "–õ–∞–¥–∞ (–∂—ñ–Ω–æ—á–∏–π) üë©"
    Dmytro = "–î–º–∏—Ç—Ä–æ (—á–æ–ª–æ–≤—ñ—á–∏–π) üë®"


print(f"CUDA available? {is_available()}")


ukr_tts = TTS()


def tts(text: str, voice: str, speed: float):
    print("============================")
    print("Original text:", text)
    print("Voice", voice)
    print("Time:", datetime.utcnow())

    voice_mapping = {
        VoiceOption.Tetiana.value: Voices.Tetiana.value,
        VoiceOption.Mykyta.value: Voices.Mykyta.value,
        VoiceOption.Lada.value: Voices.Lada.value,
        VoiceOption.Dmytro.value: Voices.Dmytro.value,
    }

    speaker_name = voice_mapping[voice]
    text_limit = 7200
    text = (
        text if len(text) < text_limit else text[0:text_limit]
    )  # mitigate crashes on hf space

    if getenv("HF_API_TOKEN") is not None:
        log_queue.put(
            [text, speaker_name, Stress.Dictionary.value, speed, str(datetime.utcnow())]
        )

    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as fp:
        _, text = ukr_tts.tts(text, speaker_name, Stress.Dictionary.value, fp, speed)
        return fp.name, text


with open("README.md") as file:
    article = file.read()
    article = article[article.find("---\n", 4) + 5 : :]


iface = gr.Interface(
    fn=tts,
    inputs=[
        gr.components.Textbox(
            label="Input",
            value="–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—î —Ä+–µ—á–µ–Ω–Ω—è.",
        ),
        gr.components.Radio(
            label="–ì–æ–ª–æ—Å",
            choices=[option.value for option in VoiceOption],
            value=VoiceOption.Tetiana.value,
        ),
        gr.components.Slider(
            label="–®–≤–∏–¥–∫—ñ—Å—Ç—å", minimum=0.5, maximum=2, value=1, step=0.1
        ),
    ],
    outputs=[
        gr.components.Audio(label="Output"),
        gr.components.Textbox(label="–ù–∞–≥–æ–ª–æ—à–µ–Ω–∏–π —Ç–µ–∫—Å—Ç"),
    ],
    title="ü§ñüí¨üá∫üá¶ - ESPNET",
    description="–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–πüá∫üá¶ TTS –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ESPNET (—â–æ–± –≤—Ä—É—á–Ω—É –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞–≥–æ–ª–æ—Å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ + –ø–µ—Ä–µ–¥ –≥–æ–ª–æ—Å–Ω–æ—é)",
    article=article,
    examples=[
        [
            "–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
            VoiceOption.Tetiana.value,
            1,
        ],
        [
            "–í–≤+–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤+–æ—î —Ä+–µ—á–µ–Ω–Ω—è.",
            VoiceOption.Dmytro.value,
            1,
        ],
        [
            "–í–≤+–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤+–æ—î —Ä–µ—á+–µ–Ω–Ω—è.",
            VoiceOption.Dmytro.value,
            1.3,
        ],
        [
            "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—î —Ä–µ—á–µ–Ω–Ω—è.",
            VoiceOption.Mykyta.value,
            1,
        ],
        [
            "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—î —Ä–µ—á–µ–Ω–Ω—è.",
            VoiceOption.Mykyta.value,
            0.7,
        ],
        [
            "–î–æ–≥–æ–≤—ñ—Ä –ø—ñ–¥–ø–∏—Å–∞–Ω–æ 4 –∫–≤—ñ—Ç–Ω—è 1949 —Ä–æ–∫—É.",
            VoiceOption.Lada.value,
            0.9,
        ],
    ],
)
iface.queue(concurrency_count=6)  # for HF specifically
iface.launch()
